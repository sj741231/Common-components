# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import mysql_grpc_pb2 as mysql__grpc__pb2


class MySQLGRPCStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.GetUsers = channel.unary_unary(
                '/mysql_grpc.MySQLGRPC/GetUsers',
                request_serializer=mysql__grpc__pb2.UsersRequest.SerializeToString,
                response_deserializer=mysql__grpc__pb2.UsersResponse.FromString,
                )
        self.GetMySQL = channel.unary_unary(
                '/mysql_grpc.MySQLGRPC/GetMySQL',
                request_serializer=mysql__grpc__pb2.MySQLRequest.SerializeToString,
                response_deserializer=mysql__grpc__pb2.MySQLResponse.FromString,
                )
        self.GetDatabase = channel.unary_unary(
                '/mysql_grpc.MySQLGRPC/GetDatabase',
                request_serializer=mysql__grpc__pb2.DatabaseRequest.SerializeToString,
                response_deserializer=mysql__grpc__pb2.DatabaseResponse.FromString,
                )


class MySQLGRPCServicer(object):
    """Missing associated documentation comment in .proto file."""

    def GetUsers(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetMySQL(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GetDatabase(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_MySQLGRPCServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'GetUsers': grpc.unary_unary_rpc_method_handler(
                    servicer.GetUsers,
                    request_deserializer=mysql__grpc__pb2.UsersRequest.FromString,
                    response_serializer=mysql__grpc__pb2.UsersResponse.SerializeToString,
            ),
            'GetMySQL': grpc.unary_unary_rpc_method_handler(
                    servicer.GetMySQL,
                    request_deserializer=mysql__grpc__pb2.MySQLRequest.FromString,
                    response_serializer=mysql__grpc__pb2.MySQLResponse.SerializeToString,
            ),
            'GetDatabase': grpc.unary_unary_rpc_method_handler(
                    servicer.GetDatabase,
                    request_deserializer=mysql__grpc__pb2.DatabaseRequest.FromString,
                    response_serializer=mysql__grpc__pb2.DatabaseResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'mysql_grpc.MySQLGRPC', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class MySQLGRPC(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def GetUsers(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mysql_grpc.MySQLGRPC/GetUsers',
            mysql__grpc__pb2.UsersRequest.SerializeToString,
            mysql__grpc__pb2.UsersResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetMySQL(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mysql_grpc.MySQLGRPC/GetMySQL',
            mysql__grpc__pb2.MySQLRequest.SerializeToString,
            mysql__grpc__pb2.MySQLResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GetDatabase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/mysql_grpc.MySQLGRPC/GetDatabase',
            mysql__grpc__pb2.DatabaseRequest.SerializeToString,
            mysql__grpc__pb2.DatabaseResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
